local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

local UILibrary = {}

local MainGui = Instance.new("ScreenGui")
MainGui.Name = "FloatingDropdownUI"
MainGui.ResetOnSpawn = false
MainGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
MainGui.Parent = CoreGui

local function getInputPos(input)
	if input.Position then
		if typeof(input.Position) == "Vector3" then
			return Vector2.new(input.Position.X, input.Position.Y)
		else
			return input.Position
		end
	end
	return Vector2.new(0,0)
end

local function makeDraggable(frame)
	local dragging, offset

	frame.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			offset = getInputPos(input) - frame.AbsolutePosition
		end
	end)

	frame.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			frame.Position = UDim2.new(0, getInputPos(input).X - offset.X, 0, getInputPos(input).Y - offset.Y)
		end
	end)
end

function UILibrary:CreateDropdown(tabName, position)
	local container = Instance.new("Frame")
	container.Size = UDim2.new(0, 170, 0, 30)
	container.Position = position or UDim2.new(0, 100, 0, 100)
	container.BackgroundTransparency = 1
	container.Parent = MainGui

	local label = Instance.new("TextLabel")
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	label.BorderSizePixel = 0
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Font = Enum.Font.Gotham
	label.TextSize = 14
	label.Text = tabName
	label.TextXAlignment = Enum.TextXAlignment.Left
	label.RichText = true
	label.Parent = container

	local padding = Instance.new("UIPadding", label)
	padding.PaddingRight = UDim.new(0, 30)

	local arrow = Instance.new("TextButton")
	arrow.Size = UDim2.new(0, 30, 1, 0)
	arrow.Position = UDim2.new(1, -30, 0, 0)
	arrow.BackgroundTransparency = 1
	arrow.BorderSizePixel = 0
	arrow.Text = "â–¼"
	arrow.TextColor3 = Color3.new(1, 1, 1)
	arrow.Font = Enum.Font.Gotham
	arrow.TextSize = 18
	arrow.Parent = container
	arrow.AutoButtonColor = true

	makeDraggable(container)

	local dropdown = Instance.new("Frame")
	dropdown.Size = UDim2.new(0, container.AbsoluteSize.X, 0, 0)
	dropdown.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	dropdown.ClipsDescendants = true
	dropdown.Parent = MainGui -- parent to MainGui for no clipping

	local layout = Instance.new("UIListLayout")
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)
	layout.Parent = dropdown

	local open = false

	local function rotateArrow(deg)
		TweenService:Create(arrow, TweenInfo.new(0.25), {Rotation = deg}):Play()
	end

	local function updateDropdownPos()
		dropdown.Position = UDim2.new(0, container.AbsolutePosition.X, 0, container.AbsolutePosition.Y + container.AbsoluteSize.Y)
		dropdown.Size = UDim2.new(0, container.AbsoluteSize.X, 0, dropdown.Size.Y.Offset)
	end

	container:GetPropertyChangedSignal("AbsolutePosition"):Connect(updateDropdownPos)
	container:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateDropdownPos)

	updateDropdownPos()

	arrow.MouseButton1Click:Connect(function()
		open = not open
		local targetHeight = open and layout.AbsoluteContentSize.Y + 8 or 0
		TweenService:Create(dropdown, TweenInfo.new(0.25), {Size = UDim2.new(0, container.AbsoluteSize.X, 0, targetHeight)}):Play()
		rotateArrow(open and 180 or 0)
	end)

	local api = {}

	function api:AddButton(text, callback)
		local button = Instance.new("TextButton")
		button.Size = UDim2.new(1, 0, 0, 24)
		button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		button.TextColor3 = Color3.new(1, 1, 1)
		button.Font = Enum.Font.Gotham
		button.TextSize = 12
		button.Text = text
		button.BorderSizePixel = 0
		button.Parent = dropdown
		button.MouseButton1Click:Connect(callback)
	end

	function api:AddToggle(text, default, callback)
		local toggle = Instance.new("TextButton")
		toggle.Size = UDim2.new(1, 0, 0, 24)
		toggle.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		toggle.TextColor3 = Color3.new(1, 1, 1)
		toggle.Font = Enum.Font.Gotham
		toggle.TextSize = 12
		toggle.BorderSizePixel = 0
		toggle.Text = text .. (default and " [ON]" or " [OFF]")
		toggle.Parent = dropdown
		local state = default
		toggle.MouseButton1Click:Connect(function()
			state = not state
			toggle.Text = text .. (state and " [ON]" or " [OFF]")
			callback(state)
		end)
	end

	function api:AddSlider(text, min, max, default, callback)
		local frame = Instance.new("Frame")
		frame.Size = UDim2.new(1, 0, 0, 24)
		frame.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
		frame.BorderSizePixel = 0
		frame.Parent = dropdown

		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 1, 0)
		label.BackgroundTransparency = 1
		label.TextColor3 = Color3.new(1, 1, 1)
		label.Font = Enum.Font.Gotham
		label.TextSize = 12
		label.TextXAlignment = Enum.TextXAlignment.Left
		label.Text = text .. ": " .. default
		label.Parent = frame

		local sliderValue = default

		frame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				local con
				con = UserInputService.InputChanged:Connect(function(move)
					if move.UserInputType == Enum.UserInputType.MouseMovement then
						local rel = (move.Position.X - frame.AbsolutePosition.X) / frame.AbsoluteSize.X
						rel = math.clamp(rel, 0, 1)
						local val = math.floor(min + (max - min) * rel)
						sliderValue = val
						label.Text = text .. ": " .. val
						callback(val)
					end
				end)
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						con:Disconnect()
					end
				end)
			end
		end)
	end

	return api
end

return UILibrary
