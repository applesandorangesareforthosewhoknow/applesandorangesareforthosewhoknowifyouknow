local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local P = game:GetService("Players")
local LP = P.LocalPlayer

local G = {}
local open = true
local tabs = {}
local dragging, offset

local ScreenGui = Instance.new("ScreenGui")
ScreenGui.IgnoreGuiInset = true
ScreenGui.ResetOnSpawn = false
ScreenGui.Name = "MainUI"
ScreenGui.Enabled = open
ScreenGui.Parent = game:GetService("CoreGui")

local notifGui = Instance.new("ScreenGui")
notifGui.IgnoreGuiInset = true
notifGui.ResetOnSpawn = false
notifGui.Name = "NotifUI"
notifGui.Parent = game:GetService("CoreGui")

local notifHolder = Instance.new("Frame", notifGui)
notifHolder.Position = UDim2.new(1, -220, 0, 20)
notifHolder.Size = UDim2.new(0, 200, 1, -40)
notifHolder.BackgroundTransparency = 1

local notifList = Instance.new("UIListLayout", notifHolder)
notifList.SortOrder = Enum.SortOrder.LayoutOrder
notifList.Padding = UDim.new(0, 6)

function G.newWindow(title)
	local W = Instance.new("Frame", ScreenGui)
	W.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
	W.Size = UDim2.new(0, 500, 0, 400)
	W.Position = UDim2.new(0.5, -250, 0.5, -200)
	W.AnchorPoint = Vector2.new(0.5, 0.5)
	W.Active = true

	local H = Instance.new("TextLabel", W)
	H.Text = title
	H.TextColor3 = Color3.new(1, 1, 1)
	H.BackgroundTransparency = 1
	H.Size = UDim2.new(1, 0, 0, 30)
	H.Font = Enum.Font.SourceSans
	H.TextSize = 24
	H.Active = true
	H.Selectable = true
	H.AutoButtonColor = false

	H.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			offset = Vector2.new(input.Position.X - W.AbsolutePosition.X, input.Position.Y - W.AbsolutePosition.Y)
			dragging = W
		end
	end)

	UIS.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	RS:BindToRenderStep("DragWindow" .. tostring(W), Enum.RenderPriority.Input.Value, function()
		if dragging == W then
			local pos = UIS:GetMouseLocation()
			W.Position = UDim2.new(0, pos.X - offset.X, 0, pos.Y - offset.Y)
		end
	end)

	local tabHolder = Instance.new("Frame", W)
	tabHolder.Position = UDim2.new(0, 0, 0, 30)
	tabHolder.Size = UDim2.new(0, 120, 1, -30)
	tabHolder.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)

	local tabList = Instance.new("UIListLayout", tabHolder)
	tabList.SortOrder = Enum.SortOrder.LayoutOrder
	tabList.Padding = UDim.new(0, 2)

	local contentHolder = Instance.new("Frame", W)
	contentHolder.Position = UDim2.new(0, 120, 0, 30)
	contentHolder.Size = UDim2.new(1, -120, 1, -30)
	contentHolder.BackgroundColor3 = Color3.new(0.18, 0.18, 0.18)
	contentHolder.ClipsDescendants = true

	local tabButtons = {}
	local tabContents = {}

	local tab = {}

	function tab.addTab(name)
		local b = Instance.new("TextButton", tabHolder)
		b.Size = UDim2.new(1, 0, 0, 30)
		b.Text = name
		b.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
		b.TextColor3 = Color3.new(1, 1, 1)
		b.Font = Enum.Font.SourceSans
		b.TextSize = 20
		tabButtons[#tabButtons + 1] = b

		local c = Instance.new("Frame", contentHolder)
		c.Position = UDim2.new(0, 0, 0, 0)
		c.Size = UDim2.new(1, 0, 1, 0)
		c.BackgroundColor3 = contentHolder.BackgroundColor3
		c.ClipsDescendants = true
		c.Visible = false
		tabContents[#tabContents + 1] = c

		b.MouseButton1Click:Connect(function()
			for i = 1, #tabContents do
				tabContents[i].Visible = false
				tabButtons[i].BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
			end
			c.Visible = true
			b.BackgroundColor3 = Color3.new(0.35, 0.35, 0.35)
		end)

		if #tabButtons == 1 then
			b.BackgroundColor3 = Color3.new(0.35, 0.35, 0.35)
			c.Visible = true
		end

		local buttons = {}
		local toggles = {}
		local sliders = {}
		local dropdowns = {}

		function c.addButton(name, f)
			local b2 = Instance.new("TextButton", c)
			b2.Size = UDim2.new(1, -10, 0, 30)
			b2.Position = UDim2.new(0, 5, 0, (#buttons + #toggles + #sliders + #dropdowns) * 36 + 6)
			b2.Text = name
			b2.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
			b2.TextColor3 = Color3.new(1, 1, 1)
			b2.Font = Enum.Font.SourceSans
			b2.TextSize = 20
			b2.MouseButton1Click:Connect(f)
			buttons[#buttons + 1] = b2
		end

		function c.addToggle(name, f)
			local b2 = Instance.new("TextButton", c)
			b2.Size = UDim2.new(1, -10, 0, 30)
			b2.Position = UDim2.new(0, 5, 0, (#buttons + #toggles + #sliders + #dropdowns) * 36 + 6)
			b2.Text = name .. ": OFF"
			b2.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
			b2.TextColor3 = Color3.new(1, 1, 1)
			b2.Font = Enum.Font.SourceSans
			b2.TextSize = 20
			local state = false
			b2.MouseButton1Click:Connect(function()
				state = not state
				b2.Text = name .. ": " .. (state and "ON" or "OFF")
				f(state)
			end)
			toggles[#toggles + 1] = b2
		end

		function c.addSlider(name, min, max, f)
			local holder = Instance.new("Frame", c)
			holder.Size = UDim2.new(1, -10, 0, 50)
			holder.Position = UDim2.new(0, 5, 0, (#buttons + #toggles + #sliders + #dropdowns) * 56 + 6)
			holder.BackgroundTransparency = 1

			local label = Instance.new("TextLabel", holder)
			label.Size = UDim2.new(1, 0, 0, 20)
			label.Text = name
			label.TextColor3 = Color3.new(1, 1, 1)
			label.BackgroundTransparency = 1
			label.Font = Enum.Font.SourceSans
			label.TextSize = 18

			local bar = Instance.new("Frame", holder)
			bar.Size = UDim2.new(1, 0, 0, 10)
			bar.Position = UDim2.new(0, 0, 0, 30)
			bar.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)

			local knob = Instance.new("Frame", bar)
			knob.Size = UDim2.new(0, 10, 1, 0)
			knob.Position = UDim2.new(0, 0, 0, 0)
			knob.BackgroundColor3 = Color3.new(1, 1, 1)

			local draggingSlider = false

			knob.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					draggingSlider = true
				end
			end)

			UIS.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					draggingSlider = false
				end
			end)

			RS.RenderStepped:Connect(function()
				if draggingSlider then
					local mouseX = UIS:GetMouseLocation().X
					local pos = bar.AbsolutePosition.X
					local size = bar.AbsoluteSize.X
					local pct = math.clamp((mouseX - pos) / size, 0, 1)
					knob.Position = UDim2.new(pct, -5, 0, 0)
					local val = math.floor(min + (max - min) * pct)
					f(val)
				end
			end)

			sliders[#sliders + 1] = holder
		end

		function c.addDropdown(name, opts, f)
			local dd = Instance.new("TextButton", c)
			dd.Size = UDim2.new(1, -10, 0, 30)
			dd.Position = UDim2.new(0, 5, 0, (#buttons + #toggles + #sliders + #dropdowns) * 36 + 6)
			dd.Text = name .. ": " .. opts[1]
			dd.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
			dd.TextColor3 = Color3.new(1, 1, 1)
			dd.Font = Enum.Font.SourceSans
			dd.TextSize = 20

			local index = 1

			dd.MouseButton1Click:Connect(function()
				index = index % #opts + 1
				dd.Text = name .. ": " .. opts[index]
				f(opts[index])
			end)

			dropdowns[#dropdowns + 1] = dd
		end

		return c
	end

	tabs[#tabs + 1] = tab
	return tab
end

function G.notify(text, t)
	local n = Instance.new("TextLabel", notifHolder)
	n.Size = UDim2.new(1, 0, 0, 30)
	n.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
	n.TextColor3 = Color3.new(1, 1, 1)
	n.Font = Enum.Font.SourceSans
	n.TextSize = 18
	n.Text = text
	n.TextWrapped = true
	task.delay(t or 3, function()
		n:Destroy()
	end)
end

function G.onPlayerJoin(f)
	P.PlayerAdded:Connect(f)
	for _, plr in ipairs(P:GetPlayers()) do
		if plr ~= LP then
			f(plr)
		end
	end
end

function G.onPlayerLeave(f)
	P.PlayerRemoving:Connect(f)
end

UIS.InputBegan:Connect(function(i)
	if i.KeyCode == Enum.KeyCode.Delete then
		open = not open
		ScreenGui.Enabled = open
	end
end)

return G
