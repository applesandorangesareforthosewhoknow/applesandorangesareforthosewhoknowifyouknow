local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local P = game:GetService("Players")
local LP = P.LocalPlayer

local G = {}
local open = true
local tabs = {}

local ScreenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
ScreenGui.IgnoreGuiInset = true
ScreenGui.ResetOnSpawn = false

local notifHolder = Instance.new("Frame", ScreenGui)
notifHolder.Position = UDim2.new(1, -220, 0, 20)
notifHolder.Size = UDim2.new(0, 200, 1, -40)
notifHolder.BackgroundTransparency = 1

local notifList = Instance.new("UIListLayout", notifHolder)
notifList.SortOrder = Enum.SortOrder.LayoutOrder
notifList.Padding = UDim.new(0, 6)

function G.newWindow(title)
	local W = Instance.new("Frame", ScreenGui)
	W.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
	W.Size = UDim2.new(0, 500, 0, 400)
	W.Position = UDim2.new(0.5, -250, 0.5, -200)
	W.AnchorPoint = Vector2.new(0.5, 0.5)
	W.Active = false

	local H = Instance.new("TextLabel", W)
	H.Text = title
	H.TextColor3 = Color3.new(1, 1, 1)
	H.BackgroundTransparency = 1
	H.Size = UDim2.new(1, 0, 0, 30)
	H.Font = Enum.Font.SourceSans
	H.TextSize = 24
	H.Active = true

	local dragging = false
	local dragInput
	local dragStart
	local startPos

	H.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = W.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)

	H.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	UIS.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - dragStart
			W.Position = UDim2.new(
				startPos.X.Scale,
				startPos.X.Offset + delta.X,
				startPos.Y.Scale,
				startPos.Y.Offset + delta.Y
			)
		end
	end)

	local tabHolder = Instance.new("Frame", W)
	tabHolder.Position = UDim2.new(0, 0, 0, 30)
	tabHolder.Size = UDim2.new(0, 120, 1, -30)
	tabHolder.BackgroundColor3 = Color3.new(0.15, 0.15, 0.15)

	local tabList = Instance.new("UIListLayout", tabHolder)
	tabList.SortOrder = Enum.SortOrder.LayoutOrder
	tabList.Padding = UDim.new(0, 2)

	local content = Instance.new("Frame", W)
	content.Position = UDim2.new(0, 120, 0, 30)
	content.Size = UDim2.new(1, -120, 1, -30)
	content.BackgroundColor3 = Color3.new(0.18, 0.18, 0.18)
	content.ClipsDescendants = true

	local list = Instance.new("UIListLayout", content)
	list.SortOrder = Enum.SortOrder.LayoutOrder
	list.Padding = UDim.new(0, 6)

	local tab = {tabHolder, content, {}, {}, {}, {}, {}}

	function tab.addTab(name)
		local b = Instance.new("TextButton", tabHolder)
		b.Size = UDim2.new(1, 0, 0, 30)
		b.Text = name
		b.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
		b.TextColor3 = Color3.new(1, 1, 1)
		b.Font = Enum.Font.SourceSans
		b.TextSize = 20

		b.MouseButton1Click:Connect(function()
			for i = 1, #tabs do
				if tabs[i] and tabs[i][2] then
					tabs[i][2].Visible = false
				end
			end
			content.Visible = true
		end)
	end

	function tab.addButton(name, f)
		local b = Instance.new("TextButton", content)
		b.Size = UDim2.new(1, -10, 0, 30)
		b.Text = name
		b.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
		b.TextColor3 = Color3.new(1, 1, 1)
		b.Font = Enum.Font.SourceSans
		b.TextSize = 20
		b.MouseButton1Click:Connect(f)
		tab[3][#tab[3]+1] = b
	end

	function tab.addToggle(name, f)
		local b = Instance.new("TextButton", content)
		b.Size = UDim2.new(1, -10, 0, 30)
		b.Text = name .. ": OFF"
		b.BackgroundColor3 = Color3.new(0.25, 0.25, 0.25)
		b.TextColor3 = Color3.new(1, 1, 1)
		b.Font = Enum.Font.SourceSans
		b.TextSize = 20
		local state = false
		b.MouseButton1Click:Connect(function()
			state = not state
			b.Text = name .. ": " .. (state and "ON" or "OFF")
			f(state)
		end)
		tab[4][#tab[4]+1] = b
	end

	function tab.addSlider(name, min, max, f)
		local holder = Instance.new("Frame", content)
		holder.Size = UDim2.new(1, -10, 0, 50)
		holder.BackgroundTransparency = 1

		local label = Instance.new("TextLabel", holder)
		label.Size = UDim2.new(1, 0, 0, 20)
		label.Text = name
		label.TextColor3 = Color3.new(1, 1, 1)
		label.BackgroundTransparency = 1
		label.Font = Enum.Font.SourceSans
		label.TextSize = 18

		local bar = Instance.new("Frame", holder)
		bar.Size = UDim2.new(1, 0, 0, 10)
		bar.Position = UDim2.new(0, 0, 0, 30)
		bar.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)

		local knob = Instance.new("Frame", bar)
		knob.Size = UDim2.new(0, 10, 1.5, 0)
		knob.Position = UDim2.new(0, 0, -0.25, 0)
		knob.BackgroundColor3 = Color3.new(1, 1, 1)

		local dragging = false

		knob.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = true
			end
		end)

		UIS.InputEnded:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 then
				dragging = false
			end
		end)

		RS.RenderStepped:Connect(function()
			if dragging then
				local mouse = UIS:GetMouseLocation().X
				local pos = bar.AbsolutePosition.X
				local size = bar.AbsoluteSize.X
				local pct = math.clamp((mouse - pos) / size, 0, 1)
				knob.Position = UDim2.new(pct, -5, -0.25, 0)
				local val = math.floor(min + (max - min) * pct)
				f(val)
			end
		end)

		tab[5][#tab[5]+1] = holder
	end

	function tab.addDropdown(name, opts, f)
		local dd = Instance.new("TextButton", content)
		dd.Size = UDim
