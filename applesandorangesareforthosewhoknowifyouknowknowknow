local CoreGui       = game:GetService("CoreGui")
local UserInput     = game:GetService("UserInputService")
local Players       = game:GetService("Players")

local u             = {}        -- library
local tabs          = {}        -- array of tabs
local currentTab    -- holds active tab (array)
local joinListeners  = {}       -- array of join callbacks
local leaveListeners = {}       -- array of leave callbacks

-- Helpers
local function T(t, v) t[#t+1] = v end
local function new(cls, parent)
    local inst = Instance.new(cls)
    inst.Parent = parent
    return inst
end

-- Select tab by numeric index
local function selectTab(i)
    if currentTab then
        currentTab[1].BackgroundColor3 = Color3.fromRGB(20,20,20)
        currentTab[2].Visible            = false
    end
    currentTab = tabs[i]
    currentTab[1].BackgroundColor3 = Color3.fromRGB(60,60,60)
    currentTab[2].Visible            = true
end

-- Base UI
local screen = new("ScreenGui", CoreGui)
screen.IgnoreGuiInset = true
screen.Name           = "UI"
screen.Enabled        = true

-- Toggle UI visibility with Delete
UserInput.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == Enum.KeyCode.Delete then
        screen.Enabled = not screen.Enabled
    end
end)

-- Main container
local body   = new("Frame", screen)
body.Size    = UDim2.new(0,500,0,350)
body.Position= UDim2.new(0.5,-250,0.5,-175)
body.BackgroundColor3 = Color3.fromRGB(30,30,30)

-- Tab buttons pane
local tabBtns = new("Frame", body)
tabBtns.Size  = UDim2.new(0,100,1,0)
tabBtns.BackgroundColor3 = Color3.fromRGB(25,25,25)

-- Tab content pane
local tabCont = new("Frame", body)
tabCont.Size     = UDim2.new(1,-100,1,0)
tabCont.Position = UDim2.new(0,100,0,0)
tabCont.BackgroundColor3 = Color3.fromRGB(40,40,40)

-- Notification panel (top‑right, auto‑growing Frame)
local notifFrame = new("Frame", screen)
notifFrame.Name               = "Notifications"
notifFrame.Size               = UDim2.new(0,300,0,0)  -- height auto‑sized
notifFrame.Position           = UDim2.new(1,-310,0,10)
notifFrame.BackgroundTransparency = 1
notifFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y  -- enable auto grow

local notifLayout = Instance.new("UIListLayout", notifFrame)
notifLayout.SortOrder = Enum.SortOrder.LayoutOrder
notifLayout.Padding   = UDim.new(0, 4)

-- Window constructor
function u.newWindow(name)
    -- Tab button
    local btn = new("TextButton", tabBtns)
    btn.Size            = UDim2.new(1,0,0,30)
    btn.BackgroundColor3= Color3.fromRGB(20,20,20)
    btn.TextColor3      = Color3.new(1,1,1)
    btn.Text            = name
    btn.AutoButtonColor = false

    -- Tab content
    local cont = new("ScrollingFrame", tabCont)
    cont.Size                = UDim2.new(1,0,1,0)
    cont.BackgroundColor3    = Color3.fromRGB(40,40,40)
    cont.Visible             = false
    cont.AutomaticCanvasSize = Enum.AutomaticSize.Y
    cont.ScrollBarThickness  = 6

    local layout = Instance.new("UIListLayout", cont)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding   = UDim.new(0,4)

    -- tab array: [1]=btn, [2]=cont, [3]=buttons, [4]=toggles, [5]=sliders, [6]=dropdowns
    local tab = { btn, cont, {}, {}, {}, {} }
    T(tabs, tab)

    btn.MouseButton1Click:Connect(function() selectTab(#tabs) end)
    if #tabs == 1 then selectTab(1) end

    -- Inject element methods
    function tab.addButton(text, cb)    u.addButton(tab, text, cb)    end
    function tab.addToggle(text, cb)    u.addToggle(tab, text, cb)    end
    function tab.addSlider(text,m,M,cb) u.addSlider(tab, text, m, M, cb) end
    function tab.addDropdown(text,ls,cb)u.addDropdown(tab, text, ls, cb) end

    return tab
end

-- Button
function u.addButton(tab, text, cb)
    local b = new("TextButton", tab[2])
    b.Size            = UDim2.new(1,-10,0,30)
    b.BackgroundColor3= Color3.fromRGB(30,30,30)
    b.TextColor3      = Color3.new(1,1,1)
    b.Text            = text
    b.AutoButtonColor = true
    T(tab[3], b)
    b.MouseButton1Click:Connect(cb)
end

-- Toggle
function u.addToggle(tab, text, cb)
    local b = new("TextButton", tab[2])
    b.Size            = UDim2.new(1,-10,0,30)
    b.BackgroundColor3= Color3.fromRGB(30,30,30)
    b.TextColor3      = Color3.new(1,1,1)
    b.Text            = text .. ": OFF"
    b.AutoButtonColor = true
    local st = false
    b.MouseButton1Click:Connect(function()
        st = not st
        b.Text = text .. ": " .. (st and "ON" or "OFF")
        cb(st)
    end)
    T(tab[4], b)
end

-- Slider
function u.addSlider(tab, text, min, max, cb)
    local fr = new("Frame", tab[2])
    fr.Size            = UDim2.new(1,-10,0,30)
    fr.BackgroundColor3= Color3.fromRGB(30,30,30)
    T(tab[5], fr)

    local lbl = new("TextLabel", fr)
    lbl.Size               = UDim2.new(1,0,1,0)
    lbl.BackgroundTransparency = 1
    lbl.TextColor3         = Color3.new(1,1,1)
    lbl.Text               = text .. ": " .. min

    local sl = new("TextButton", fr)
    sl.Size               = UDim2.new(0,0,1,0)
    sl.BackgroundColor3   = Color3.fromRGB(70,70,70)
    sl.Text               = ""
    sl.AutoButtonColor    = false

    sl.InputBegan:Connect(function(i)
        if i.UserInputType == Enum.UserInputType.MouseButton1 then
            local mv, up
            mv = UserInput.InputChanged:Connect(function(m)
                if m.UserInputType == Enum.UserInputType.MouseMovement then
                    local x = math.clamp((m.Position.X-fr.AbsolutePosition.X)/fr.AbsoluteSize.X,0,1)
                    sl.Size = UDim2.new(x,0,1,0)
                    local v = math.floor(min + (max-min)*x)
                    lbl.Text = text .. ": " .. v
                    cb(v)
                end
            end)
            up = UserInput.InputEnded:Connect(function(m2)
                if m2.UserInputType==Enum.UserInputType.MouseButton1 then
                    mv:Disconnect()
                    up:Disconnect()
                end
            end)
        end
    end)
end

-- Dropdown
function u.addDropdown(tab, text, list, cb)
    local drop = new("TextButton", tab[2])
    drop.Size            = UDim2.new(1,-10,0,30)
    drop.BackgroundColor3= Color3.fromRGB(30,30,30)
    drop.TextColor3      = Color3.new(1,1,1)
    drop.Text            = text
    drop.AutoButtonColor = true
    T(tab[6], drop)

    local open = false
    local opts = {}

    drop.MouseButton1Click:Connect(function()
        open = not open
        for i=1,#opts do opts[i].Visible = open end
    end)

    for i=1,#list do
        local v = list[i]
        local o = new("TextButton", tab[2])
        o.Size            = UDim2.new(1,-20,0,30)
        o.BackgroundColor3= Color3.fromRGB(20,20,20)
        o.TextColor3      = Color3.new(1,1,1)
        o.Text            = "  ↪ " .. v
        o.Visible         = false
        o.AutoButtonColor = true
        o.MouseButton1Click:Connect(function()
            cb(v)
            open = false
            for j=1,#opts do opts[j].Visible = false end
        end)
        T(opts, o)
    end
end

-- Notifications (stacked auto‑growing Frame)
function u.notify(txt, dur)
    local lbl = new("TextLabel", notifFrame)
    lbl.Size            = UDim2.new(1,0,0,30)
    lbl.BackgroundColor3= Color3.fromRGB(50,50,50)
    lbl.TextColor3      = Color3.new(1,1,1)
    lbl.Text            = txt
    lbl.TextScaled      = true
    task.delay(dur or 3, function() lbl:Destroy() end)
end

-- Player events
Players.PlayerAdded:Connect(function(p)
    for i=1,#joinListeners do joinListeners[i](p) end
end)
Players.PlayerRemoving:Connect(function(p)
    for i=1,#leaveListeners do leaveListeners[i](p) end
end)

function u.onPlayerJoin(cb)  T(joinListeners, cb)  end
function u.onPlayerLeave(cb) T(leaveListeners, cb) end

return u
