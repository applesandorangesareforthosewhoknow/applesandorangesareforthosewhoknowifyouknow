local g = game:GetService("CoreGui")
local u = {}
local tabs = {}
local currentTab

-- UI Base Setup
local s = Instance.new("ScreenGui", g)
s.IgnoreGuiInset = true
s.Name = "UI"
local top = Instance.new("Frame", s)
top.Size = UDim2.new(0, 500, 0, 30)
top.Position = UDim2.new(0.5, -250, 0, 50)
top.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
local body = Instance.new("Frame", s)
body.Size = UDim2.new(0, 500, 0, 300)
body.Position = UDim2.new(0.5, -250, 0, 80)
body.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
local tabBtns = Instance.new("Frame", body)
tabBtns.Size = UDim2.new(0, 100, 1, 0)
tabBtns.Position = UDim2.new(0, 0, 0, 0)
tabBtns.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
local tabCont = Instance.new("Frame", body)
tabCont.Size = UDim2.new(1, -100, 1, 0)
tabCont.Position = UDim2.new(0, 100, 0, 0)
tabCont.BackgroundColor3 = Color3.fromRGB(40, 40, 40)

-- Toggle Visibility with Delete
local open = true
game:GetService("UserInputService").InputBegan:Connect(function(i)
	if i.KeyCode == Enum.KeyCode.Delete then
		open = not open
		s.Enabled = open
	end
end)

-- Helper Functions
local function T(t, v) t[#t+1] = v end
local function new(class, parent)
	local i = Instance.new(class)
	i.Parent = parent
	return i
end
local function selectTab(i)
	if currentTab then currentTab.cont.Visible = false end
	currentTab = tabs[i]
	currentTab.cont.Visible = true
end

-- Window Constructor
function u.newWindow(name)
	local tbtn = new("TextButton", tabBtns)
	tbtn.Size = UDim2.new(1, 0, 0, 30)
	tbtn.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
	tbtn.Text = name
	tbtn.TextColor3 = Color3.new(1, 1, 1)
	tbtn.AutoButtonColor = false

	local tcont = new("ScrollingFrame", tabCont)
	tcont.Size = UDim2.new(1, 0, 1, 0)
	tcont.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
	tcont.Visible = false
	tcont.CanvasSize = UDim2.new(0, 0, 1, 0)
	tcont.ScrollBarThickness = 6
	tcont.AutomaticCanvasSize = Enum.AutomaticSize.Y

	local layout = Instance.new("UIListLayout", tcont)
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)

	local tab = {
		btn = tbtn,
		cont = tcont,
		buttons = {},
		toggles = {},
		sliders = {},
		dropdowns = {}
	}
	T(tabs, tab)
	tbtn.MouseButton1Click:Connect(function() selectTab(#tabs) end)
	if #tabs == 1 then selectTab(1) end

	-- Add Element Methods
	function tab.addButton(text, cb) u.addButton(tab, text, cb) end
	function tab.addToggle(text, cb) u.addToggle(tab, text, cb) end
	function tab.addSlider(text, min, max, cb) u.addSlider(tab, text, min, max, cb) end
	function tab.addDropdown(text, list, cb) u.addDropdown(tab, text, list, cb) end

	return tab
end

-- Elements
function u.addButton(tab, text, cb)
	local b = new("TextButton", tab.cont)
	b.Size = UDim2.new(1, -10, 0, 30)
	b.Position = UDim2.new(0, 5, 0, 0)
	b.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	b.TextColor3 = Color3.new(1, 1, 1)
	b.Text = text
	b.AutoButtonColor = true
	b.MouseButton1Click:Connect(cb)
	T(tab.buttons, b)
end

function u.addToggle(tab, text, cb)
	local b = new("TextButton", tab.cont)
	b.Size = UDim2.new(1, -10, 0, 30)
	b.Position = UDim2.new(0, 5, 0, 0)
	b.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	b.TextColor3 = Color3.new(1, 1, 1)
	b.Text = text .. ": OFF"
	b.AutoButtonColor = true
	local state = false
	b.MouseButton1Click:Connect(function()
		state = not state
		b.Text = text .. ": " .. (state and "ON" or "OFF")
		cb(state)
	end)
	T(tab.toggles, b)
end

function u.addSlider(tab, text, min, max, cb)
	local frame = new("Frame", tab.cont)
	frame.Size = UDim2.new(1, -10, 0, 30)
	frame.Position = UDim2.new(0, 5, 0, 0)
	frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)

	local label = new("TextLabel", frame)
	label.Size = UDim2.new(1, 0, 1, 0)
	label.BackgroundTransparency = 1
	label.Text = text .. ": " .. min
	label.TextColor3 = Color3.new(1, 1, 1)

	local slider = new("TextButton", frame)
	slider.Size = UDim2.new(0, 0, 1, 0)
	slider.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
	slider.Position = UDim2.new(0, 0, 0, 0)
	slider.Text = ""
	slider.AutoButtonColor = false

	slider.InputBegan:Connect(function(i)
		if i.UserInputType == Enum.UserInputType.MouseButton1 then
			local moveConn
			moveConn = game:GetService("UserInputService").InputChanged:Connect(function(m)
				if m.UserInputType == Enum.UserInputType.MouseMovement then
					local x = math.clamp((m.Position.X - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
					slider.Size = UDim2.new(x, 0, 1, 0)
					local val = math.floor(min + (max - min) * x)
					label.Text = text .. ": " .. val
					cb(val)
				end
			end)
			local endConn
			endConn = game:GetService("UserInputService").InputEnded:Connect(function(i2)
				if i2.UserInputType == Enum.UserInputType.MouseButton1 then
					moveConn:Disconnect()
					endConn:Disconnect()
				end
			end)
		end
	end)
	T(tab.sliders, frame)
end

function u.addDropdown(tab, text, list, cb)
	local drop = new("TextButton", tab.cont)
	drop.Size = UDim2.new(1, -10, 0, 30)
	drop.Position = UDim2.new(0, 5, 0, 0)
	drop.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	drop.TextColor3 = Color3.new(1, 1, 1)
	drop.Text = text
	drop.AutoButtonColor = true

	local open = false
	local opts = {}

	drop.MouseButton1Click:Connect(function()
		open = not open
		for _, o in next, opts do
			o.Visible = open
		end
	end)

	for _, v in next, list do
		local o = new("TextButton", tab.cont)
		o.Size = UDim2.new(1, -10, 0, 30)
		o.Position = UDim2.new(0, 5, 0, 0)
		o.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
		o.TextColor3 = Color3.new(1, 1, 1)
		o.Text = "  â†ª " .. v
		o.Visible = false
		o.AutoButtonColor = true
		o.MouseButton1Click:Connect(function()
			cb(v)
			open = false
			for _, x in next, opts do x.Visible = false end
		end)
		T(opts, o)
	end

	T(tab.dropdowns, drop)
end

-- Notification
function u.notify(text, dur)
	local n = new("TextLabel", s)
	n.Size = UDim2.new(0, 300, 0, 30)
	n.Position = UDim2.new(0.5, -150, 0, 400)
	n.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	n.TextColor3 = Color3.new(1, 1, 1)
	n.Text = text
	n.TextScaled = true
	task.delay(dur or 3, function() n:Destroy() end)
end

-- Player Events
function u.onPlayerJoin(cb)
	game.Players.PlayerAdded:Connect(cb)
end

function u.onPlayerLeave(cb)
	game.Players.PlayerRemoving:Connect(cb)
end

return u
